Contexte du Projet : Break
Objectif du Projet : Break est une application web privée destinée à une entreprise, visant à améliorer le bien-être des employés en leur permettant de prendre des pauses et de participer à des activités relaxantes. L'application se concentre sur le bien-être des employés.

Rôles Utilisateurs :

Employé : Peut prendre des pauses et participer à des activités. Chaque employé a accès à un tableau de bord personnel pour voir ses propres statistiques.
Manager : Peut consulter les statistiques de son équipe et de chaque membre de l'équipe. Chaque manager a également accès à son propre tableau de bord personnel.
Directeur RH : Peut consulter les statistiques globales, par équipe et par individu. Chaque directeur RH a accès à son propre tableau de bord personnel.
Fonctionnalités Clés :

Prendre une pause et effectuer une activité pour tous les rôles.
Accéder aux statistiques de bien-être, telles que le niveau de stress, le nombre de pauses, et l'activité la plus appréciée.
Calculer un niveau de stress basé sur les statistiques collectées et les questionnaires effectués soit à chaque pause et activité, soit au début et à la fin de chaque journée. Le niveau de stress est la métrique principale et est observable par l'utilisateur et ses supérieurs.
Tests de bien-être à réaliser à la fin de chaque activité ou au début et à la fin de chaque journée (en cours de définition).
L'utilisateur donne une note après chaque activité et pause effectuées. Ces notes, la fréquence des pauses, et la fréquence d'utilisation sont enregistrées pour générer des statistiques.
L'application doit prendre en compte les données de l'utilisateur pour lui faire des recommandations personnalisées via des notifications.
Notifications et Recommandations :

Deux recommandations par jour sont prévues. Si la première recommandation n'est pas suivie, une deuxième est envoyée. Si la première est suivie, une seule recommandation est envoyée.
Un rappel de prendre une pause est envoyé après une heure de travail continu.
L'efficacité des notifications et recommandations est mesurée en vérifiant si, après l'heure de la suggestion, une pause ou une activité a été effectuée.
Les recommandations personnalisées se baseront sur le type d'activité déjà faite par l'utilisateur, en lui proposant un autre type pour varier les expériences.
Technologies Utilisées :

Frontend : React avec Next.js et des extensions comme Lucide, Motion, Recharts, Tailwind CSS, React Hook Form, et Shadcn.
Backend : Express.js avec une architecture RESTful.
Base de Données : MongoDB
Langage : TypeScript pour le frontend et le backend, utilisant des fichiers .ts et .tsx.
Structure du Projet Backend :

Configuration du Style
Fichier de Configuration Tailwind CSS:

Nom du Fichier: tailwind.config.js
Emplacement: Racine du projet
Description: Ce fichier configure les styles globaux de l'application en utilisant Tailwind CSS. Il inclut des couleurs personnalisées pour correspondre à l'identité visuelle du projet.
Couleurs Personnalisées:
Primaire: #7346FF
Secondaire: #CFAAFF
Tertiaire: #D5DDF4 (utilisée pour le fond d'écran)
Gris Personnalisé: #656565

Structure de Dossiers pour le Frontend
/project-root
|-- /src
|   |-- /pages
|   |   |-- _app.tsx          // Fichier pour la configuration globale de l'application
|   |   |-- index.tsx         // Page d'accueil
|   |   |-- login.tsx         // Page de connexion
|   |   |-- breaks.tsx        // Page des pauses
|   |   |-- activities.tsx    // Page des activités
|   |   |-- dashboard.tsx     // Dashboard utilisateur
|   |   |-- statistics.tsx    // Page des statistiques
|   |   |-- settings.tsx      // Page des paramètres
|   |-- /components
|   |   |-- Sidebar.tsx       // Composant de la barre latérale
|   |   |-- Layout.tsx        // Composant de mise en page globale
|   |-- /styles
|   |   |-- globals.css       // Styles globaux pour l'application
|   |-- /utils
|   |   |-- api.ts            // Fonctions utilitaires pour les appels API
|   |   |-- helpers.ts        // Fonctions utilitaires diverses
|   |-- /context
|   |   |-- AuthContext.tsx   // Contexte pour l'authentification
|   |   |-- ThemeContext.tsx  // Contexte pour la gestion du thème


Explications
pages: Contient tous les fichiers de page. Chaque fichier correspond à une route dans l'application. Le fichier _app.tsx est utilisé pour appliquer des configurations globales à l'application.
components: Contient des composants réutilisables, comme la Sidebar pour la navigation et le Layout pour la structure de la page.
styles: Contient les fichiers CSS globaux. Avec Tailwind CSS, ce dossier peut être minimal, mais il est utile pour les styles globaux ou les configurations spécifiques.
utils: Contient des fonctions utilitaires qui peuvent être utilisées dans différentes parties de l'application, comme les appels API ou les helpers.
context: Contient les contextes React pour gérer l'état global de l'application, comme l'authentification ou le thème.
Le backend est structuré selon une architecture RESTful avec Express.js, utilisant des middlewares pour l'authentification, l'autorisation, la validation, et la gestion des erreurs.
Packages à Installer pour le Backend :

Mongoose, Express.js, Cors, Dotenv, JSON Web Token (jsonwebtoken), Bcrypt, Helmet, Morgan, Express-validator, Nodemon.
Exemple de Structure de Projet :

/project-root
|-- /src
|   |-- /controllers
|   |   |-- userController.ts
|   |   |-- teamController.ts
|   |   |-- ...
|   |-- /models
|   |   |-- userModel.ts
|   |   |-- teamModel.ts
|   |   |-- ...
|   |-- /routes
|   |   |-- userRoutes.ts
|   |   |-- teamRoutes.ts
|   |   |-- ...
|   |-- /middlewares
|   |   |-- authMiddleware.ts
|   |   |-- errorMiddleware.ts
|   |   |-- ...
|   |-- /utils
|   |   |-- ...
|   |-- app.ts
|-- /tests
|   |-- user.test.ts
|   |-- team.test.ts
|-- package.json
|-- ...


Copy

Apply

Pages de l'Application :

Page d'accueil : Vue générale de l'application.
Page de pause : Pour prendre une pause.
Page des activités : Pour participer à des activités.
Dashboard utilisateur : Récapitulatif des statistiques personnelles de l'utilisateur connecté.
Page des statistiques : Accessible aux managers et RH pour voir les statistiques des équipes et des individus.
Page des paramètres : Pour gérer les préférences de l'utilisateur.
Collections MongoDB :

users: Informations sur les utilisateurs, y compris les préférences et les personnalisations.
teams: Détails sur les équipes, y compris les membres et les objectifs.
breaks: Informations sur les pauses prises par les utilisateurs.
activities: Détails sur les activités disponibles.
sessions: Enregistrements des sessions d'activité des utilisateurs.
metrics: Statistiques de performance et d'engagement des utilisateurs.
achievements: Informations sur les réalisations et récompenses des utilisateurs.
notifications: Notifications envoyées aux utilisateurs.
favorites: Activités favorites des utilisateurs.
feedback: Retours d'expérience des utilisateurs sur les activités.
schedule: Planning des activités des utilisateurs.
departmentStats: Statistiques par département.
tips: Conseils pour les utilisateurs (détails à définir).
État Actuel :

Le projet est en phase de configuration initiale. Vous avez commencé l'installation des dépendances.
Gestion de Version :

Utilisation de Git avec une branche main, une branche dev, et des branches features pour chaque fonctionnalité, dérivées de dev.
Utilisation de GitHub pour l'hébergement du code source.
Collaboration :

Projet individuel pour le moment.
Déploiement :

Pas encore choisi, mais Git et GitHub seront utilisés.
Statistiques :

Les méthodes de mesure des statistiques, comme le niveau de stress, ne sont pas encore définies de manière détaillée.
Intégrations :

Pas d'intégrations prévues avec d'autres systèmes ou services pour le moment.